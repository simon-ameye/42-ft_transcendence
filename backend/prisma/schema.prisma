// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Match {
  id       Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  date String
  score Int[]
  opponent String
}

model User {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  email        String   @unique
  hash         String?
  displayName  String   @unique
  imageUrl     String?
  googleSecret String?
  qrcode       String?
  socketId     String?   @unique
  matching     Matching?
  
  friends   Int[]
  blockedUserIds Int[]

  inGame       Boolean @default(false)
  score     Int     @default(0)
  gameId    Int?
  side      Int?
  victories Int         @default(0)
  paddleY   Float   @default(0.5)
  watching  Int     @default(-1)

  log               Boolean   @default(false)
  userFriends       Friends[] @relation(name: "users")
  friendUserFriends Friends[] @relation(name: "friend_users")

  status            Status       @default(OFFLINE)

  matchHistory  Match[]

  @@map("users")
}

model Friends {
  id        Int      @id @default(autoincrement())
  user_id   Int
  friend_id Int
  user      User     @relation(name: "users", fields: [user_id], references: [id])
  friend    User     @relation(name: "friend_users", fields: [friend_id], references: [id])
  status    fstatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([user_id, friend_id])
}

model Channel{
  id              Int         @id @default(autoincrement())
  name            String      @default("unknown channel")
  mode            ChannelMode @default(PUBLIC)
  password        String      @default("")
  ownerId         Int         @default(0)
  adminIds        Int[]
  banedUserIds    Int[]
  messageIds      Int[]
  userIds         Int[]
  muteUserIds     Int[]
  muteRelease     DateTime[]
}

model Message {
  id       Int      @id @default(autoincrement())
  text     String?
  authorId Int //one  to many field
  date     DateTime @default(now())
}

enum ChannelMode {
  PUBLIC //everybody can join, but there may be a password. No password => password = ''
  DIRECT //direct messages between two users
  PRIVATE //new users must be invited by channel users (not clear in the subject)
}

enum fstatus {
  pending
  accepted
  declined
  blocked
}

model Matching {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Game {
  id      Int     @id @default(autoincrement())
  players Int[]
  powerUp Boolean @default(false)
}

enum Status {
  OFFLINE //everybody can join, but there may be a password. No password => password = ''
  ONLINE //direct messages between two users
  PLAYING //new users must be invited by channel users (not clear in the subject)
}
